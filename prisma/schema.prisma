generator client {
  provider = "prisma-client-js"
}

generator trpc {
  provider             = "prisma-trpc-generator"
  withZod              = true
  withMiddleware       = false
  withShield           = false
  contextPath          = "../src/server/context"
  trpcOptionsPath      = "../src/server/trpcOptions"
  generateModelActions = "count,create,createMany,delete,deleteMany,findFirst,findMany,groupBy,update,updateMany,upsert"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  slug        String        @unique
  fullTitle   String
  image       String
  title       String
  description String
  startTime   String
  endTime     String
  keyTags     KeyTag[]
  status      ProjectStatus

  Degrees Degrees[]

  dbCreationDate DateTime @default(now())
  dbDateOfChange DateTime @updatedAt
}

model Degrees {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  specialisation String?
  attachment     String?
  attachmentType AttachmentType?
  type           DegreeType
  description    String
  comment        String?
  projectId      String?         @db.ObjectId
  project        Project?        @relation(fields: [projectId], references: [id])
  startTime      String
  endTime        String

  Education Education[]

  dbCreationDate DateTime @default(now())
  dbDateOfChange DateTime @updatedAt
}

model Qualification {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  publisher      String?
  keyTags        KeyTag[]
  attachment     String?
  attachmentType AttachmentType?
  ignoreTime     Boolean
  startTime      String?
  endTime        String?
  time           String?

  dbCreationDate DateTime @default(now())
  dbDateOfChange DateTime @updatedAt
}

model Education {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  institute   String
  description String?
  degreeId    String?  @db.ObjectId
  degree      Degrees? @relation(fields: [degreeId], references: [id])
  startTime   String
  endTime     String

  dbCreationDate DateTime @default(now())
  dbDateOfChange DateTime @updatedAt
}

model Experience {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  jobPosition  String?
  firmName     String?
  description  String?
  contractType String?
  customName   String?
  startTime    String
  endTime      String
  keyTags      KeyTag[]

  dbCreationDate DateTime @default(now())
  dbDateOfChange DateTime @updatedAt
}

enum AttachmentType {
  pdf
  jpg
  png
  url
}

enum DegreeType {
  asociate
  bachelors
  master
  doctor
}

enum KeyTag {
  //Front-end
  VanillaJS
  ReactJS
  Angular
  Vue

  //Front-end UI components
  DevExtreme
  MaterialUI
  Bootstrap
  AntDesign
  Tailwind

  //Systems
  Debian

  //Back-end
  Express
  NestJS
  NodeJS

  //Full-stack
  MMF2Dev
  NextJS
  Prisma
  tRPC

  //Database
  MongoDB
  SQLite
  Postgres

  //Embedded
  JohnnyFive

  //Communication protocols
  WebSocket
  MQTT
  TCP

  //Hardware
  Eagle
  Arduino
  ESP

  //Programmable Logic Controller / Robotics
  FactoryIO
  VBScript
  iRVision
  KAREL
  SCL
  STL
  LAD

  //3D design
  Fusion360

  //Programming languages
  CPlusPlus
  LabView
  MatLab
  Python
  CSharp
  PHP

  //Application
  Research
  Industry
  IoT

  //Category
  RoboticsAndAutomation
  Electronics
  FullStack
  FrontEnd
  BackEnd
}

enum ProjectStatus {
  unknown
  design
  prototype
  inProgress
  tests
  dropped
  finished
}
